{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"First launch This documentation covers the first launch usage of RPGMTranslate, open and simple translation tool for RPG Maker games, and one of its main strengths is that it tries to keep a simple file structure and uses plain text translation files. For more advanced usage, refer to the advanced guides: Search guide Text editing guide Getting Started First, download the latest release from GitHub . Program is completely free, and you can get the .msi extension binaries for Windows, and .deb or self-contained .AppImage for Linux. To build from the source, refer to Building from source . Once you've installed the program and launched it, it'll create a settings file in ROOT_DIR/res/settings.json , along with a themes file in ROOT_DIR/res/themes.json . If the program didn't load the interface for any reason (I don't have the resources for thorough testing), you can open the console with F12 to look for errors. It's actually always helpful. Interface layout When you open the program for the first time, you will see the following layout: Menu bar buttons Menu button (Tab) Save button (Ctrl + S) Compile button (Alt + C) Open directory button Settings button Themes button Bookmarks button Search button (Ctrl + S) Tools button Read button Project info (will show when a project is opened, includes translated rows counter, currently opened tab name, changable game title and project's engine) Search panel (R) Main area (will show when a project is opened and a tab is opened) To clarify, \"compile\" term was selected because it sounds cool, and it's distinctive. In the underlying rvpacker-txt-rs-lib library, the term that's used for writing the translation back to initial files is \"write\". \"a project\" is a directory, that contains an RPG Maker game. So, \"to open a project\" means to open a directory that contains an RPG Maker game in the program. \"a tab\" is an entry from the left menu (also left panel, tabs panel/menu), that is clicked to open a specific file in the program, for example skills.txt . All the layout parts must be obvious to you. Opening a project To open a project, just click on the Open directory button and select the folder in the dialog window. After that, the program will create an .rpgmtranslate directory in the root of the opened folder. This directory - is a working directory, where all the files related to the project stored, including the translation in form of .txt files, that are fully plain text and can be safely zipped and sent to anyone. The program is extremely careful about backups - by default, backup happens every 60 seconds, and the program stores up to 99 backups in .rpgmtranslate/backups directory. From there, you can just open a tab from the left menu and start your translation. Advanced usage For the usage of search - see Search . For the usage of text manipulation tools and its under-the-hood details - see Text editing .","title":"First launch"},{"location":"#first-launch","text":"This documentation covers the first launch usage of RPGMTranslate, open and simple translation tool for RPG Maker games, and one of its main strengths is that it tries to keep a simple file structure and uses plain text translation files. For more advanced usage, refer to the advanced guides: Search guide Text editing guide","title":"First launch"},{"location":"#getting-started","text":"First, download the latest release from GitHub . Program is completely free, and you can get the .msi extension binaries for Windows, and .deb or self-contained .AppImage for Linux. To build from the source, refer to Building from source . Once you've installed the program and launched it, it'll create a settings file in ROOT_DIR/res/settings.json , along with a themes file in ROOT_DIR/res/themes.json . If the program didn't load the interface for any reason (I don't have the resources for thorough testing), you can open the console with F12 to look for errors. It's actually always helpful.","title":"Getting Started"},{"location":"#interface-layout","text":"When you open the program for the first time, you will see the following layout: Menu bar buttons Menu button (Tab) Save button (Ctrl + S) Compile button (Alt + C) Open directory button Settings button Themes button Bookmarks button Search button (Ctrl + S) Tools button Read button Project info (will show when a project is opened, includes translated rows counter, currently opened tab name, changable game title and project's engine) Search panel (R) Main area (will show when a project is opened and a tab is opened) To clarify, \"compile\" term was selected because it sounds cool, and it's distinctive. In the underlying rvpacker-txt-rs-lib library, the term that's used for writing the translation back to initial files is \"write\". \"a project\" is a directory, that contains an RPG Maker game. So, \"to open a project\" means to open a directory that contains an RPG Maker game in the program. \"a tab\" is an entry from the left menu (also left panel, tabs panel/menu), that is clicked to open a specific file in the program, for example skills.txt . All the layout parts must be obvious to you.","title":"Interface layout"},{"location":"#opening-a-project","text":"To open a project, just click on the Open directory button and select the folder in the dialog window. After that, the program will create an .rpgmtranslate directory in the root of the opened folder. This directory - is a working directory, where all the files related to the project stored, including the translation in form of .txt files, that are fully plain text and can be safely zipped and sent to anyone. The program is extremely careful about backups - by default, backup happens every 60 seconds, and the program stores up to 99 backups in .rpgmtranslate/backups directory. From there, you can just open a tab from the left menu and start your translation.","title":"Opening a project"},{"location":"#advanced-usage","text":"For the usage of search - see Search . For the usage of text manipulation tools and its under-the-hood details - see Text editing .","title":"Advanced usage"},{"location":"build/","text":"Building from source Clone the repository: git clone https://github.com/savannstm/rpgmtranslate.git . cd to the repository and install all required Node.js dependencies: npm install . Run npm run tauri dev , to run the program in dev mode, or npm run tauri build , to build the program for your current OS. You can edit frontend's program source code in src directory, and backend source code in src-tauri/src directory. After the build, target directory will be created in the gui/src-tauri path, containing binary file with program build and distributable bundled packages in the target/bundle directory.","title":"Build from source"},{"location":"build/#building-from-source","text":"Clone the repository: git clone https://github.com/savannstm/rpgmtranslate.git . cd to the repository and install all required Node.js dependencies: npm install . Run npm run tauri dev , to run the program in dev mode, or npm run tauri build , to build the program for your current OS. You can edit frontend's program source code in src directory, and backend source code in src-tauri/src directory. After the build, target directory will be created in the gui/src-tauri path, containing binary file with program build and distributable bundled packages in the target/bundle directory.","title":"Building from source"},{"location":"search/","text":"Search guide Once you've clicked the search button, the search window will be opened. Let's break up it's functionality. Search window layout . The search input Replace button: replaces all occurences of the text in the search input Put button: puts the text to the translation field of the source text that matches the text in the search input. The replace input Search pattern buttons, from left to right: Case-sensitive search (Alt + C), search whole words (Alt + W), regex search (Alt + R), search only in the currently opened tab (Alt + L) Search mode: whether to search only in original or only in translation text Both search and replace input are multi-line . Note: Put button matches source text as a whole, not by line like in Translator++ . Search implementation You probably won't encounter memory leaks or performance issues with search, as the number of search entries, loaded in memory in a single moment is limited to 1000 . This is done via splitting search entries to multiple files, with first of them being displayed at the end of the search when displaying the search results. Regex implementation Honestly, you can just fucking open Visual Studio Code and other shit to make sure you can revert all the damage you did with your shitty regexes, if you want to use them. But if you want to use regex in the program, here's a quick breakdown: The program uses JavaScript implementation of regex. It's not as cool as Perl's, but it is, for example, used in VSCode. The program fully probably supports unicode in regex. I didn't really think of implementing the substitutions in the program (ones that's annotated with $), so please DON'T use substitutions in replace input, as it will replace LITERALLY. To summarize: regex search works flawlessly, but there's no substitutions. Here's a simple example of searching for \\c pattern in text: Search results panel layout Switch between search and log mode The number of matches pages Matched text and its metadata Matched text's counterpart and its metadata Pro tip: upon LMB click on the search result, the program will zoom to text's location. Upon RMB click, matched text will be replaced by the text entered to the replace input.","title":"Search guide"},{"location":"search/#search-guide","text":"Once you've clicked the search button, the search window will be opened. Let's break up it's functionality.","title":"Search guide"},{"location":"search/#search-window-layout","text":". The search input Replace button: replaces all occurences of the text in the search input Put button: puts the text to the translation field of the source text that matches the text in the search input. The replace input Search pattern buttons, from left to right: Case-sensitive search (Alt + C), search whole words (Alt + W), regex search (Alt + R), search only in the currently opened tab (Alt + L) Search mode: whether to search only in original or only in translation text Both search and replace input are multi-line . Note: Put button matches source text as a whole, not by line like in Translator++ .","title":"Search window layout"},{"location":"search/#search-implementation","text":"You probably won't encounter memory leaks or performance issues with search, as the number of search entries, loaded in memory in a single moment is limited to 1000 . This is done via splitting search entries to multiple files, with first of them being displayed at the end of the search when displaying the search results.","title":"Search implementation"},{"location":"search/#regex-implementation","text":"Honestly, you can just fucking open Visual Studio Code and other shit to make sure you can revert all the damage you did with your shitty regexes, if you want to use them. But if you want to use regex in the program, here's a quick breakdown: The program uses JavaScript implementation of regex. It's not as cool as Perl's, but it is, for example, used in VSCode. The program fully probably supports unicode in regex. I didn't really think of implementing the substitutions in the program (ones that's annotated with $), so please DON'T use substitutions in replace input, as it will replace LITERALLY. To summarize: regex search works flawlessly, but there's no substitutions. Here's a simple example of searching for \\c pattern in text:","title":"Regex implementation"},{"location":"search/#search-results-panel-layout","text":"Switch between search and log mode The number of matches pages Matched text and its metadata Matched text's counterpart and its metadata Pro tip: upon LMB click on the search result, the program will zoom to text's location. Upon RMB click, matched text will be replaced by the text entered to the replace input.","title":"Search results panel layout"},{"location":"text-editing/","text":"Text editing The program aims to provide as convenient as possible text editing. This includes a couple of shortcuts. Editing area layout The column containing row number information, bookmark and delete buttons The source text column The translation text column Editing You can edit the translation textarea like any other website input field. For convenience, the following shortcuts are implemented: Alt + Enter - jump to the next (bottom) row Ctrl + Enter - jump to the previous (top) row Ctrl + T - on the first use, display machine-translated source text inside translation textarea, on the second use - apply this translation to the textarea. Note: the program uses Google Translate for now only, and translation languages must be configured in options. LMB on source text section of row - copy the source text Text editing tools Using the \"Tools\" button, you can perform one of three actions on your translation. The first is \"Trim fields\", which removes the leading and trailing whitespace from translation. The second is \"Translate fields\", which automatically machine-translates the source text and puts the translation to the fields. It doesn't affect already filled translation fields. The third is \"Wrap lines in fields\" - the most dangerous of them all. DO NOT use this if you're unsure. It lets you input the line length (in characters) for wrapping, and then wraps the translation text lines. If the line exceeds input length, its content will be transfered to the next line. It may make your translation display incorrectly, so USE WITH CAUTION .","title":"Text editing guide"},{"location":"text-editing/#text-editing","text":"The program aims to provide as convenient as possible text editing. This includes a couple of shortcuts.","title":"Text editing"},{"location":"text-editing/#editing-area-layout","text":"The column containing row number information, bookmark and delete buttons The source text column The translation text column","title":"Editing area layout"},{"location":"text-editing/#editing","text":"You can edit the translation textarea like any other website input field. For convenience, the following shortcuts are implemented: Alt + Enter - jump to the next (bottom) row Ctrl + Enter - jump to the previous (top) row Ctrl + T - on the first use, display machine-translated source text inside translation textarea, on the second use - apply this translation to the textarea. Note: the program uses Google Translate for now only, and translation languages must be configured in options. LMB on source text section of row - copy the source text","title":"Editing"},{"location":"text-editing/#text-editing-tools","text":"Using the \"Tools\" button, you can perform one of three actions on your translation. The first is \"Trim fields\", which removes the leading and trailing whitespace from translation. The second is \"Translate fields\", which automatically machine-translates the source text and puts the translation to the fields. It doesn't affect already filled translation fields. The third is \"Wrap lines in fields\" - the most dangerous of them all. DO NOT use this if you're unsure. It lets you input the line length (in characters) for wrapping, and then wraps the translation text lines. If the line exceeds input length, its content will be transfered to the next line. It may make your translation display incorrectly, so USE WITH CAUTION .","title":"Text editing tools"}]}